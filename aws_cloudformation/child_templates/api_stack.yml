Description: Stack responsible for creating the resources related to the use of the Model Endpoint created

Transform: AWS::Serverless-2016-10-31

Parameters:
  VpcId:
    Type: String
    Description: ID of the existing VPC where resources will be created
  SubnetId:
    Type: String
    Description: ID of the existing subnet where resources will be created
  SubnetId2:
    Type: String
    Description: ID of the second existing subnet where resources will be created
  VPCSecurityGroup: 
    Type: String
    Description: Security group to be passed to the resources created
  Stage:
    Type: String
    Description: Application Environment
    AllowedValues: ["dev", "stg", "prd"]
  EcsTaskExecutionRoleArn:
    Type: String
    Description: Arn of the role to be used by ECS
  LambdaLayerKeyRequests:
    Type: String
    Description: S3 Bucket key where the requests lambda layer deployment package is stored
  ProjectBucket:
    Type: String
    Description: Name of the bucket where the build artifacts are stored

Mappings:
  ResourceNames:
    AppPrefix:
      CamelCase: "bainMLEngineeringTest"
      SnakeCase: "bain_ml_engineering_test"
      PascalCase: "BainMLEngineeringTest"
      KebabCase: "bain-ml-engineering-test"

  StageName:
    dev:
      CamelCase: "Dev"
      UpperCase: "DEV"
    stg:
      CamelCase: "Stg"
      UpperCase: "STG"
    prd:
      CamelCase: "Prd"
      UpperCase: "PRD"

Resources:

  ApiTestingLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: "../../lambda_code"
      Environment:
        Variables:
          DNS_NAME: !GetAtt ECSLoadBalancer.DNSName
      FunctionName: !Sub "test-api-lambda-${Stage}"
      Layers: 
        - !Ref RequestsLayer
      Handler: test_api_lambda.lambda_handler
      MemorySize: 512
      Runtime: python3.8
      Timeout: 60
      Role: !Ref EcsTaskExecutionRoleArn
      VpcConfig:
        SecurityGroupIds:
          - !Ref VPCSecurityGroup
        SubnetIds:
          - !Ref SubnetId

  RequestsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: 
        Bucket: !Ref ProjectBucket
        Key: !Ref LambdaLayerKeyRequests
      Description: Layer contendo distribuição do Requests
      LayerName: !Sub "price-predictor-requests-layer-${Stage}"

  VPCSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref VPCSecurityGroup

  OutputLoggingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "inference-results-logging-table-${Stage}"
      AttributeDefinitions:
        -
          AttributeName: "timestamp"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "timestamp"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"

  ECSFargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "property-value-predictor-api-${Stage}"

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/property-value-predictor-api-${Stage}"

  ApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "property-value-predictor-api-${Stage}"
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref EcsTaskExecutionRoleArn
      ExecutionRoleArn: !Ref EcsTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: !Sub property-value-predictor-${Stage}
          Image: !Sub ${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/sagemaker-model-deployment-api-${Stage}:latest
          Memory: 512
          Cpu: 256
          PortMappings:
            - ContainerPort: 4200
              HostPort: 4200
          LogConfiguration: 
            LogDriver: awslogs
            Options: 
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: STAGE
              Value: !Sub "${Stage}"
            - Name: REGION
              Value: !Ref AWS::Region

  ECSFargateService:
    Type: AWS::ECS::Service
    DependsOn: ECSListener
    Properties:
      Cluster: !Ref ECSFargateCluster
      ServiceName: !Sub "property-value-predictor-api-${Stage}"
      TaskDefinition: !Ref ApiTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref SubnetId
            - !Ref SubnetId2
          SecurityGroups:
            - !Ref VPCSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !Sub property-value-predictor-${Stage}
          ContainerPort: 4200
          TargetGroupArn: !Ref ECSTargetGroup

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub value-predictor-ecs-lb-${Stage}
      Scheme: internal 
      Subnets:
        - !Ref SubnetId
        - !Ref SubnetId2
      SecurityGroups:
        - !Ref VPCSecurityGroup

  ECSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup
      LoadBalancerArn: !Ref ECSLoadBalancer
      Port: 80 
      Protocol: HTTP 

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub value-predictor-ecs-lb-tg-${Stage}
      Port: 4200
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /ping

  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub property-value-predictor-api-keys-${Stage}
      Description: A secret generated using CloudFormation
      GenerateSecretString:
        ExcludeCharacters: '"@/\\'
        ExcludePunctuation: true
        GenerateStringKey: "ApiKey1"
        PasswordLength: 12
        SecretStringTemplate: '{}'

Outputs:
  ApiTestingLambdaArn:
    Description: ARN of the Lambda function
    Value: !GetAtt ApiTestingLambda.Arn
